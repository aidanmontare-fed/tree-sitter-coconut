===
Lambda Syntax
===

(a, b, c) => a + b + c
(a) => a + 1
a => a - 1
(a => a + 1)
(=> 42)
((_=None) => 42)
() => 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
Deprecated lambda syntax "->"
===


(a, b, c) -> a + b + c
(a) -> a + 1
a -> a - 1
(a -> a + 1)
(-> 42)
((_=None) -> 42)
() -> 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
lambdas (coconut docs example)
===

dubsums = map((x, y) => 2*(x+y), range(0, 10), range(10, 20))
dubsums |> list |> print

---

(module // todo
	())


===
implicit lambdas (docs)
===

import random

square = (=> _**2)
get_random_number = (=> random.random())

---

(module
  (import_statement
    (dotted_name
      (identifier)))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (binary_operator
            (identifier)
            (integer))))))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (call
            (attribute
              (identifier)
              (identifier))
            (argument_list)))))))

