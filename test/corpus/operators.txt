===
Lambda Syntax
===

(a, b, c) => a + b + c
(a) => a + 1
a => a - 1
(a => a + 1)
(=> 42)
((_=None) => 42)
() => 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
Deprecated lambda syntax "->"
===


(a, b, c) -> a + b + c
(a) -> a + 1
a -> a - 1
(a -> a + 1)
(-> 42)
((_=None) -> 42)
() -> 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
lambdas (coconut docs example)
===

dubsums = map((x, y) => 2*(x+y), range(0, 10), range(10, 20))
dubsums |> list |> print

---

(module
  (expression_statement
    (assignment
      (identifier)
      (call
        (identifier)
        (argument_list
          (lambda
            (lambda_parameters
              (identifier)
              (identifier))
            (binary_operator
              (integer)
              (parenthesized_expression
                (binary_operator
                  (identifier)
                  (identifier)))))
          (call
            (identifier)
            (argument_list
              (integer)
              (integer)))
          (call
            (identifier)
            (argument_list
              (integer)
              (integer)))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier))))


===
implicit lambdas (docs)
===

import random

square = (=> _**2)
get_random_number = (=> random.random())

---

(module
  (import_statement
    (dotted_name
      (identifier)))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (binary_operator
            (identifier)
            (integer))))))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (call
            (attribute
              (identifier)
              (identifier))
            (argument_list)))))))

===
Partial application
===

f$(12)
g$(a,b)
h$(a)(b)
f$(?,12)
f$(option='foo')
f$(1,?,3)

---

(module
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (call
      (partial
        (identifier)
        (partial_argument_list
          (identifier)))
      (argument_list
        (identifier))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (deferred_argument)
        (integer))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (keyword_argument
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end))))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer)
        (deferred_argument)
        (integer)))))

===
Partial application: converting keyword arguments to position arguments
===

f$(x=?)
g$(12,option=?)

---

(module
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (keyword_converted_to_positional
          (identifier)
          (deferred_argument)))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer)
        (keyword_converted_to_positional
          (identifier)
          (deferred_argument))))))

===
Partial application (docs)
===

expnums = range(5) |> map$(pow$(?, 2))
expnums |> list |> print

---

(module
  (expression_statement
    (assignment
      (identifier)
      (pipe
        (call
          (identifier)
          (argument_list
            (integer)))
        (partial
          (identifier)
          (partial_argument_list
            (partial
              (identifier)
              (partial_argument_list
                (deferred_argument)
                (integer))))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier))))

===
Pipes
===

x |> f
x |> f |> g
(a, b) |*> h
{"foo": 12} |**> f
f <| x
f <*| (a, b)
f <**| dict(a=12,b=13)
None |?> never_runs
possible_result |?*> f
dict(a=13) |?**> f
f <?| x
f <*?| (a,b)
f <**?| dict(a=13)

---

(module
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (tuple
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (dictionary
        (pair
          (string
            (string_start)
            (string_content)
            (string_end))
          (integer)))
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer))
          (keyword_argument
            (identifier)
            (integer))))))
  (expression_statement
    (pipe
      (none)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer))))
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer)))))))

===
equivalents to pipes
===

x |> f
f(x)

(a, b) |> f
f(a,b)

f <| x
f(x)

---

(module
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier))))
  (expression_statement
    (pipe
      (tuple
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)))))

===
Piping into await
===

x |> await # TODO should the awaits parse as identifiers or something else?
await x

x |> f |> await

x |> f |> g |> await

x |> await
await <| x
maybe_x |?> await
await <?| maybe_x
x |>= await
await <|= x         # TODO does this make sense?
maybe_x |?>= await
await <?|= maybe_x  # TODO this too

---

(module
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (comment)
  (expression_statement
    (await
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (comment)
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (comment))

===
cannot pipe into await with a starred pipe
:error

:skip
# TODO right now such a thing parses, which is maybe fine?
===

x |*> await

---

===
Piping into walrus assignment
===

12 |> (x := .)
12 |> f |> (x := .)
(x := .) <| 12
(cool_name := .) <| f <| 12
maybe_12 |?> f |?> (x := .)
(cool_name := .) <?| f <?| maybe_12

# x |>= (x := .)  # TODO are these possible?
# (x := .) <|=    # TODO are these possible?
# |?>= (x := .)   # TODO are these possible?
# (x := .) <?|=   # TODO are these possible?

---

(module
  (expression_statement
    (pipe
      (integer)
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (pipe
        (integer)
        (identifier))
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (pipe_named_expression_partial
        (identifier))
      (integer)))
  (expression_statement
    (pipe
      (pipe
        (pipe_named_expression_partial
          (identifier))
        (identifier))
      (integer)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (pipe
        (pipe_named_expression_partial
          (identifier))
        (identifier))
      (identifier)))
  (comment)
  (comment)
  (comment)
  (comment))

===
Whitespace variations of piping into walrus assignment
===

12 |> (x := .)
12 |> (x :=  .)
12 |> (x := . )
12 |> (x := .  )
---

(module
  (expression_statement
    (pipe
      (integer)
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (integer)
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (integer)
      (pipe_named_expression_partial
        (identifier))))
  (expression_statement
    (pipe
      (integer)
      (pipe_named_expression_partial
        (identifier)))))

===
cannot pipe into walrus with starred pipes
:error
===

(a, b) |*> (x := .)

---

===
lambda as last argument of pipe (docs)

# TODO what about the backwards pipe operators? which argument is allowed to be a lambda?
===

a |> x => b |> c
a |> (x => b |> c)
a |> (x => b) |> c

---

(module
  (expression_statement
    (pipe
      (identifier)
      (lambda
        (lambda_parameters
          (identifier))
        (pipe
          (identifier)
          (identifier)))))
  (expression_statement
    (pipe
      (identifier)
      (parenthesized_expression
        (lambda
          (lambda_parameters
            (identifier))
          (pipe
            (identifier)
            (identifier))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (parenthesized_expression
          (lambda
            (lambda_parameters
              (identifier))
            (identifier))))
        (identifier))))

===
Pipes (docs)
===

obj |> .attribute |> .method(args) |> func$(args) |> .[index]

def sq(x) = x**2
(1, 2) |*> (+) |> sq |> print

async def do_stuff(some_data) = (
    some_data
    |> async_func
    |> await
    |> post_proc
)

---

===
Pipes and operator functions
# TODO other things to test?
  # combo of parenthesized pipes and op functions?
===

(a, b) |*> (*) |> h

---

(module
  (expression_statement
    (pipe
      (pipe
        (tuple
          (identifier)
          (identifier))
        (tuple
          (operator_function)))
      (identifier))))

===
Pipes within other constructs
===

def something(x):
    return (
      x
      |> f
      |> g
      |> h
    )

def another(x):
    return x |> f |> g |> h

if a |> f and b |> g:
    print('yay!')

---

(module
  (function_definition
    (identifier)
    (parameters
      (identifier))
    (block
      (return_statement
        (parenthesized_expression
          (pipe
            (pipe
              (pipe
                (identifier)
                (identifier))
              (identifier))
            (identifier))))))
  (function_definition
    (identifier)
    (parameters
      (identifier))
    (block
      (return_statement
        (pipe
          (pipe
            (pipe
              (identifier)
              (identifier))
            (identifier))
          (identifier)))))
  (if_statement
    (boolean_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier)))
    (block
      (expression_statement
        (call
          (identifier)
          (argument_list
            (string
              (string_start)
              (string_content)
              (string_end))))))))

===
Precedence of pipes (docs)
===

x |> y + z
x |> (y + z)

---

(module
  (expression_statement
    (pipe
      (identifier)
      (binary_operator
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (parenthesized_expression
        (binary_operator
          (identifier)
          (identifier))))))

===
Precedence of pipes
===

(a |> f) + (b |> g)

a |> f and b |> g
(a |> f) and (b |> g)

a |> f or b |> g

x |> f ..> g
x |> (f ..> g)

x |> f <| g
(x |> f) <| g

a |> f == b |> g

a |> f is b |> g

a |> f is not b |> g

a |> f in my_list

---

(module
  (expression_statement
    (binary_operator
      (parenthesized_expression
        (pipe
          (identifier)
          (identifier)))
      (parenthesized_expression
        (pipe
          (identifier)
          (identifier)))))
  (expression_statement
    (boolean_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier))))
  (expression_statement
    (boolean_operator
      (parenthesized_expression
        (pipe
          (identifier)
          (identifier)))
      (parenthesized_expression
        (pipe
          (identifier)
          (identifier)))))
  (expression_statement
    (boolean_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (composition_pipe
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (parenthesized_expression
        (composition_pipe
          (identifier)
          (identifier)))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (parenthesized_expression
        (pipe
          (identifier)
          (identifier)))
      (identifier)))
  (expression_statement
    (comparison_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier))))
  (expression_statement
    (comparison_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier))))
  (expression_statement
    (comparison_operator
      (pipe
        (identifier)
        (identifier))
      (pipe
        (identifier)
        (identifier))))
  (expression_statement
    (comparison_operator
      (pipe
        (identifier)
        (identifier))
      (identifier))))

===
Left-associativity of pipes
===

a |> b |> c
a |> b <| c
b <| a |> c
b <| a <| c

---

(module
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier))))

===
Left-associativity of pipes 2
===

a |> b |> c |> d
a |> b |> c <| d
a |> b <| c |> d
a |> b <| c <| d
b <| a |> c |> d
b<| a |> c <| d
b <| a <| c |> d
b <| a <| c <| d

---

(module
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (pipe
          (identifier)
          (identifier))
        (identifier))
      (identifier))))

===
In-place Pipes
===

x |>= f
(a, b) |*>= f
my_dict |**>= f
f <|= x   # TODO why would you do this? (or any of the backwards examples here)
f <*|= (a, b)
f <**|= dict(a=1,b=2)
maybe |?>= f
(a, b) |?*>= f
maybe_dict |?**>= f
f <?|= None
f <*?|= (x,y)
f <**?|= maybe_dict

---

(module
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (comment)
  (expression_statement
    (augmented_assignment
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (augmented_assignment
      (identifier)
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer))
          (keyword_argument
            (identifier)
            (integer))))))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (tuple_pattern
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (none)))
  (expression_statement
    (augmented_assignment
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (augmented_assignment
      (identifier)
      (identifier))))

===
Pipes with parenthetical continuation
===

(x
  |> f
  |> g
  |> h)

---

(module
  (expression_statement
    (parenthesized_expression
      (pipe
        (pipe
          (pipe
            (identifier)
            (identifier))
          (identifier))
        (identifier)))))
