===
Lambda Syntax
===

(a, b, c) => a + b + c
(a) => a + 1
a => a - 1
(a => a + 1)
(=> 42)
((_=None) => 42)
() => 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
Deprecated lambda syntax "->"
===


(a, b, c) -> a + b + c
(a) -> a + 1
a -> a - 1
(a -> a + 1)
(-> 42)
((_=None) -> 42)
() -> 42

---

(module
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier)
				(identifier)
				(identifier))
			(binary_operator
				(binary_operator
					(identifier)
					(identifier))
				(identifier))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(lambda
			(lambda_parameters
				(identifier))
			(binary_operator
				(identifier)
				(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(identifier))
				(binary_operator
					(identifier)
					(integer)))))
	(expression_statement
		(parenthesized_expression
			(lambda
					(integer))))
	(expression_statement
		(parenthesized_expression
			(lambda
				(lambda_parameters
					(default_parameter
						(identifier)
						(none)))
					(integer))))
	(expression_statement
		(lambda
			(lambda_parameters)
			(integer))))


===
lambdas (coconut docs example)
===

dubsums = map((x, y) => 2*(x+y), range(0, 10), range(10, 20))
dubsums |> list |> print

---

(module
  (expression_statement
    (assignment
      (identifier)
      (call
        (identifier)
        (argument_list
          (lambda
            (lambda_parameters
              (identifier)
              (identifier))
            (binary_operator
              (integer)
              (parenthesized_expression
                (binary_operator
                  (identifier)
                  (identifier)))))
          (call
            (identifier)
            (argument_list
              (integer)
              (integer)))
          (call
            (identifier)
            (argument_list
              (integer)
              (integer)))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier))))


===
implicit lambdas (docs)
===

import random

square = (=> _**2)
get_random_number = (=> random.random())

---

(module
  (import_statement
    (dotted_name
      (identifier)))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (binary_operator
            (identifier)
            (integer))))))
  (expression_statement
    (assignment
      (identifier)
      (parenthesized_expression
        (lambda
          (call
            (attribute
              (identifier)
              (identifier))
            (argument_list)))))))

===
Partial application
===

f$(12)
g$(a,b)
h$(a)(b)
f$(?,12)
f$(option='foo')
f$(1,?,3)

---

(module
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (call
      (partial
        (identifier)
        (partial_argument_list
          (identifier)))
      (argument_list
        (identifier))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (deferred_argument)
        (integer))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (keyword_argument
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end))))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer)
        (deferred_argument)
        (integer)))))

===
Partial application: converting keyword arguments to position arguments
===

f$(x=?)
g$(12,option=?)

---

(module
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (keyword_converted_to_positional
          (identifier)
          (deferred_argument)))))
  (expression_statement
    (partial
      (identifier)
      (partial_argument_list
        (integer)
        (keyword_converted_to_positional
          (identifier)
          (deferred_argument))))))

===
Partial application (docs)
===

expnums = range(5) |> map$(pow$(?, 2))
expnums |> list |> print

---

(module
  (expression_statement
    (assignment
      (identifier)
      (pipe
        (call
          (identifier)
          (argument_list
            (integer)))
        (partial
          (identifier)
          (partial_argument_list
            (partial
              (identifier)
              (partial_argument_list
                (deferred_argument)
                (integer))))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier))))


===
Pipes
===

x |> f
x |> f |> g
(a, b) |*> (*) |> h
{"foo": 12} |**> f
f <| x
f <*| (a, b)
f <**| dict(a=12,b=13)
None |?> never_runs
possible_result |?*> f
dict(a=13) |?**> f
f <?| x
f <*?| (a,b)
f <**?| dict(a=13)

---

(module
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (pipe
      (pipe
        (tuple
          (identifier)
          (identifier))
        (tuple
          (operator_function)))
      (identifier)))
  (expression_statement
    (pipe
      (dictionary
        (pair
          (string
            (string_start)
            (string_content)
            (string_end))
          (integer)))
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer))
          (keyword_argument
            (identifier)
            (integer))))))
  (expression_statement
    (pipe
      (none)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer))))
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (pipe
      (identifier)
      (tuple
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (call
        (identifier)
        (argument_list
          (keyword_argument
            (identifier)
            (integer)))))))

===
equivalents to pipes
===

x |> f
f(x)

(a, b) |> f
f(a,b)

f <| x
f(x)

---

(module
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier))))
  (expression_statement
    (pipe
      (tuple
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)
        (identifier))))
  (expression_statement
    (pipe
      (identifier)
      (identifier)))
  (expression_statement
    (call
      (identifier)
      (argument_list
        (identifier)))))

===
Piping into await
===

===
cannot pipe into await with a starred pipe
:error
===

===
Piping into walrus assignment
===

===
cannot pipe into walrus with starred pipes
:error
===

===
lambda as last argument of pipe (docs)
===

a |> x => b |> c
a |> (x => b |> c)
a |> (x => b) |> c

---

(module
  (expression_statement
    (pipe
      (identifier)
      (lambda
        (lambda_parameters
          (identifier)
        (pipe
          (identifier)
          (identifier))))))
  (expression_statement
    (pipe
      (identifier)
      (parenthesized_expression
        (lambda
          (lambda_parameters
            (identifier))
          (pipe
            (identifier)
            (identifier))))))
  (expression_statement
    (pipe
      (pipe
        (identifier)
        (parenthesized_expression
          (lambda
            (lambda_parameters
              (identifier))
            (identifier))))
        (identifier))))

===
Pipes (docs)
===

obj |> .attribute |> .method(args) |> func$(args) |> .[index]

def sq(x) = x**2
(1, 2) |*> (+) |> sq |> print

async def do_stuff(some_data) = (
    some_data
    |> async_func
    |> await
    |> post_proc
)

---

===
In-place Pipes
===

|>=
|*>=
|**>=
<|=
<*|=
<**|=
|?>=
|?*>=
|?**>=
<?|=
<*?|=
<**?|=

---


===
Pipes with parenthetical continuation
===

(x
  |> f
  |> g
  |> h)

---

(module
  (expression_statement
    (parenthesized_expression
      (pipe
        (pipe
          (pipe
            (identifier)
            (identifier))
          (identifier))
        (identifier)))))
